install.packages("dplyr")
learning2014 <- rename(leaning2014, c(age,points)= c(Age,Points))
learning2014 <- rename(leaning2014, age = Age, points = Points)
library(dplyr)
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
str(lrn14)
dim(lrn14)
library(dplyr)
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D07","D14","D22","D30")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra <- rowMeans(strategic_columns)
lrn14$attitude <- lrn14$Attitude / 10
keep_columns <- c("gender","Age","attitude","deep","stra","surf","Points")
learning2014 <- select(lrn14,one_of(keep_columns))
learning2014 <- rename(leaning2014, age = Age, points = Points)
head(learning2014)
str(leaning2014)
str(learning2014)
dim(learning2014)
learning2014 <- rename(leaning2014, age = Age, points = Points)
learning2014 <- rename(learning2014, age = Age, points = Points)
head(learning2014)
str(learning2014)
dim(learning2014)
rename(learning2014, age = Age, points = Points)
head(learning2014)
keep_columns <- c("gender","Age","attitude","deep","stra","surf","Points")
learning2014 <- select(lrn14,one_of(keep_columns))
head(learning2014)
rename(learning2014, age = Age, points = Points)
head(learning2014)
learning <- learning2014 <- select(lrn14,one_of(keep_columns))
learning2014 <- learning2014 <- select(lrn14,one_of(keep_columns))
rename(learning2014, age = Age, points = Points)
head(learning2014)
str(learning2014)
learning2014 <- rename(learning2014, age = Age, points = Points)
head(learning2014)
str(learning2014)
dim(learning2014)
learning2014 <- filter(learning2014, points > 0)
dim(learning2014)
setwd("~/Documents/IODS/git/IODS-project/data/")
write.csv(x = lrn14, file = "learning2014.csv")
test_data <- read.csv(file = "learning2014.csv")
head(test_data)
write.csv(x = learning2014, file = "learning2014.csv")
test_data <- read.csv(file = "learning2014.csv")
head(test_data)
str(test_data)
dim(lrn14)
#Data wrangling, chapter 2
# read the data into memory
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
#explore structure
str(lrn14)
#Most data is in an integer form (Likert scale or age etc.) and gender is a factor
#explore dimensions
dim(lrn14)
#There are 183 observations and 60 variables
#Create analysis dataset in several steps with variables gender, age, attitude, deep, stra, surf, points (and bottom of meta.txt)
# First we access the dplyr library
library(dplyr)
# Second we specify the questions related to deep, surface and strategic learning
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D07","D14","D22","D30")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
# 3rd.a) we select the columns related to deep learning and create column 'deep' by averaging
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
# 3rd.b) Fourth select the columns related to surface learning and create column 'surf' by averaging
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# 3rd.c) select the columns related to strategic learning and create column 'stra' by averaging
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra <- rowMeans(strategic_columns)
# 4th. a) we scale down "Attitude"
lrn14$attitude <- lrn14$Attitude / 10
# 4th. b) we define the columns we need
keep_columns <- c("gender","Age","attitude","deep","stra","surf","Points")
# 4th. c) we combine the needed data to a skimmed dataframe
learning2014 <- select(lrn14,one_of(keep_columns))
# 4th. d) rename Age and Points
learning2014 <- rename(learning2014, age = Age, points = Points)
# 5th exclude observations where exam points = 0
learning2014 <- filter(learning2014, points > 0)
# Finally check the data
head(learning2014)
str(learning2014)
dim(learning2014)
#we got 166 observations and seven variables, nice!
#set working directory
setwd("~/Documents/IODS/git/IODS-project/data/")
#save dataset
write.csv(x = learning2014, file = "learning2014.csv")
#read the data with new name to check its integrity
test_data <- read.csv(file = "learning2014.csv")
head(test_data)
str(test_data)
#Everything seems to be working fine
#Data wrangling, chapter 2
# read the data into memory
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
#explore structure
str(lrn14)
#Most data is in an integer form (Likert scale or age etc.) and gender is a factor
#explore dimensions
dim(lrn14)
#There are 183 observations and 60 variables
#Create analysis dataset in several steps with variables gender, age, attitude, deep, stra, surf, points (and bottom of meta.txt)
# First we access the dplyr library
library(dplyr)
# Second we specify the questions related to deep, surface and strategic learning
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D07","D14","D22","D30")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
# 3rd.a) we select the columns related to deep learning and create column 'deep' by averaging
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
# 3rd.b) Fourth select the columns related to surface learning and create column 'surf' by averaging
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# 3rd.c) select the columns related to strategic learning and create column 'stra' by averaging
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra <- rowMeans(strategic_columns)
# 4th. a) we scale down "Attitude"
lrn14$attitude <- lrn14$Attitude / 10
# 4th. b) we define the columns we need
keep_columns <- c("gender","Age","attitude","deep","stra","surf","Points")
# 4th. c) we combine the needed data to a skimmed dataframe
learning2014 <- select(lrn14,one_of(keep_columns))
# 4th. d) rename Age and Points
learning2014 <- rename(learning2014, age = Age, points = Points)
# 5th exclude observations where exam points = 0
learning2014 <- filter(learning2014, points > 0)
# Finally check the data
head(learning2014)
str(learning2014)
dim(learning2014)
#we got 166 observations and seven variables, nice!
#set working directory
setwd("~/Documents/IODS/git/IODS-project/data/")
#save dataset
write.csv(x = learning2014, file = "learning2014.csv")
#read the data with new name to check its integrity
test_data <- read.csv(file = "learning2014.csv")
head(test_data)
str(test_data)
#Everything seems to be working fine
rm(c(deep_columns,lrn14,strategic_columns,surface_columns,test_data))
rm(deep_columns,lrn14,strategic_columns,surface_columns,test_data)
rm(deep_columns,lrn14,strategic_columns,surface_columns,test_data,deep_questions,keep_columns,strategic_questions,surface_questions)
test_data <- read.csv(file = "learning2014.csv")
head(test_data)
str(test_data)
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
str(lrn14)
dim(lrn14)
test_data <- filter(test_data, X)
test_data <- select(test_data[-1])
head(test_data)
test_data <- read.csv(file = "learning2014.csv")
test_data <- select(test_data[,-1])
head(test_data)
test_data <- select(test_data[,2])
test_data <- read.csv(file = "learning2014.csv")
test_data <- select(test_data[,2])
test_data <- test_data[,-1]
head(test_data)
str(test_data)
test_data <- test_data[,-1] #remove id_number
test_data <- read.csv(file = "learning2014.csv",row.names = "X")
head(test_data)
str(test_data)
test_data <- read.csv(file = "learning2014.csv",row.names = "X")
head(test_data)
str(test_data)
test_data <- read.csv(file = "learning2014.csv")
head(test_data)
str(test_data)
test_data <- read.csv(file = "learning2014.csv",row.names = "X")
head(test_data)
str(test_data)
setwd("~/Documents/IODS/git/IODS-project/data/")
knit_with_parameters('~/Documents/IODS/git/IODS-project/chapter2.Rmd')
learning2014 <- read.csv("data/learning2014.csv",row.names = "X")
dim(learning2014)
str(learning2014)
```{r echo=FALSE}
```{r echo=FALSE}
learning2014 <- read.csv("data/learning2014.csv",row.names = "X")
dim(learning2014)
str(learning2014)
summary(learning2014)
library(dplyr)
summarise(learning2014)
dim(learning2014)
str(learning2014)
summary(learning2014)
install.packages("ggplot2")
```{r echo=FALSE}
library(ggplot2)
ggplot(learning2014,aes(age)) +
geom_histogram()
ggplot(learning2014,aes(age)) +
geom_histogram() +
ggtitle("Histogram of age")
ggplot(learning2014,aes(attitude,deep,stra,surf,points)) +
geom_boxplot() +
ggtitle("Boxplot") +
library(ggplot2)
ggplot(learning2014,aes(age)) +
geom_histogram() +
ggtitle("Histogram of age")
ggplot(learning2014,aes(attitude,deep,stra,surf,points)) +
geom_boxplot() +
ggtitle("Boxplot") +
ggplot(learning2014,aes(attitude,deep,stra,surf,points)) +
geom_boxplot() +
ggtitle("Boxplot")
ggplot(learning2014,aes(attitude,deep,stra,surf)) +
geom_boxplot() +
ggtitle("Boxplot")
ggplot(learning2014,aes(gender,attitude)) +
geom_boxplot() +
ggtitle("Boxplot")
ggplot(learning2014,aes(gender,attitude)) +
geom_boxplot(color(gender)) +
ggtitle("Boxplot")
ggplot(learning2014,aes(gender,attitude)) +
geom_boxplot(color(gender)) +
ggtitle("Boxplot")
ggplot(learning2014,aes(gender,attitude)) +
geom_boxplot(color=gender) +
ggtitle("Boxplot")
ggplot(learning2014,aes(gender,attitude)) +
geom_boxplot(color=gender) +
ggtitle("Boxplot")
ggplot(learning2014,aes(gender,attitude)) +
geom_boxplot(aes(color=gender)) +
ggtitle("Boxplot")
ggplot(learning2014,aes(gender,attitude)) +
geom_boxplot(aes(color=gender)) +
ggtitle("Attitude - boxplot for two genders")
ggplot(learning2014,aes(gender,deep)) +
geom_boxplot(aes(color=gender)) +
ggtitle("Attitude - boxplot for two genders")
ggplot(learning2014,aes(gender,stra)) +
geom_boxplot(aes(color=gender)) +
ggtitle("Attitude - boxplot for two genders")
ggplot(learning2014,aes(gender,surf)) +
geom_boxplot(aes(color=gender)) +
ggtitle("Stra - boxplot for two genders")
ggplot(learning2014,aes(gender,points)) +
geom_boxplot(aes(color=gender)) +
ggtitle("Stra - boxplot for two genders")
ggplot(learning2014,aes(age,gender)) +
geom_histogram() +
ggtitle("Histogram of age")
ggplot(learning2014,aes(age)) +
geom_histogram(aes(color=gender)) +
ggtitle("Histogram of age")
ggplot(learning2014,aes(gender,attitude)) +
geom_boxplot(aes(fill=gender)) +
ggtitle("Attitude - boxplot for two genders")
ggplot(learning2014,aes(age)) +
geom_histogram(aes(fill=gender)) +
ggtitle("Histogram of age")
ggplot(learning2014,aes(age)) +
geom_histogram(aes(color=gender)) +
ggtitle("Histogram of age")
ggplot(learning2014,aes(age)) +
geom_histogram(aes(fill=gender)) +
ggtitle("Histogram of age")
ggplot(learning2014,aes(gender,attitude)) +
geom_boxplot(aes(fill=gender)) +
ggtitle("Attitude - boxplot for two genders")
ggplot(learning2014,aes(gender,deep)) +
geom_boxplot(aes(color=gender)) +
ggtitle("Deep - boxplot for two genders")
ggplot(learning2014,aes(gender,deep)) +
geom_boxplot(aes(fill=gender)) +
ggtitle("Deep - boxplot for two genders")
ggplot(learning2014,aes(surf)) +
geom_boxplot(aes(fill=gender)) +
ggtitle("Stra - boxplot for two genders")
ggplot(learning2014,aes(gender,surf)) +
geom_boxplot(aes(fill=gender)) +
ggtitle("Stra - boxplot for two genders")
ggplot(learning2014,aes(gender,points)) +
geom_boxplot(aes(fill=gender)) +
ggtitle("Stra - boxplot for two genders")
ggplot(learning2014,aes(gender,attitude)) +
geom_boxplot(aes(fill=gender)) +
geom_jitter(width = 0.2) +
ggtitle("Attitude - boxplot for two genders")
ggplot(learning2014,aes(gender,deep)) +
geom_boxplot(aes(fill=gender)) +
geom_jitter(width = 0.2) +
ggtitle("Deep - boxplot for two genders")
ggplot(learning2014,aes(gender,deep)) +
geom_boxplot(aes(fill=gender)) +
geom_jitter(width = 0.1) +
ggtitle("Deep - boxplot for two genders")
ggplot(learning2014,aes(gender,deep)) +
geom_boxplot(aes(fill=gender)) +
geom_jitter(width = 0.3) +
ggtitle("Deep - boxplot for two genders")
ggplot(learning2014,aes(gender,points)) +
geom_jitter(width = 0.1) +
geom_boxplot(aes(fill=gender)) +
ggtitle("Stra - boxplot for two genders")
ggplot(learning2014,aes(gender,points)) +
geom_boxplot(aes(fill=gender)) +
geom_jitter(width = 0.1) +
ggtitle("Stra - boxplot for two genders")
ggplot(learning2014,aes(gender,points)) +
geom_boxplot(aes(fill=gender)) +
geom_jitter(width = 0.1,fill="grey") +
ggtitle("Stra - boxplot for two genders")
ggplot(learning2014,aes(gender,points)) +
geom_boxplot(aes(fill=gender)) +
geom_jitter(width = 0.1,fill=gender) +
ggtitle("Stra - boxplot for two genders")
ggplot(learning2014,aes(gender,points)) +
geom_boxplot(aes(fill=gender)) +
geom_jitter(width = 0.1,aes(fill=gender) +
ggtitle("Stra - boxplot for two genders")
ggplot(learning2014,aes(gender,points)) +
ggplot(learning2014,aes(gender,points)) +
geom_boxplot(aes(fill=gender)) +
geom_jitter(width = 0.1,aes(color=gender)) +
ggtitle("Stra - boxplot for two genders")
ggplot(learning2014,aes(gender,points)) +
geom_boxplot(aes(fill=gender)) +
geom_jitter(width = 0.1,aes(fill=gender)) +
ggtitle("Stra - boxplot for two genders")
ggplot(learning2014,aes(gender,points)) +
geom_boxplot(aes(fill=gender)) +
geom_jitter(width = 0.1,aes(color="grey")) +
ggtitle("Stra - boxplot for two genders")
ggplot(learning2014,aes(gender,points)) +
geom_boxplot(aes(fill=gender)) +
geom_jitter(width = 0.1) +
ggtitle("Stra - boxplot for two genders")
ggplot(learning2014,aes(gender,surf)) +
geom_boxplot(aes(fill=gender)) +
geom_jitter(width = 0.1) +
ggtitle("Surf - boxplot for two genders")
ggplot(learning2014,aes(gender,points)) +
geom_boxplot(aes(fill=gender)) +
geom_jitter(width = 0.1) +
ggtitle("Points - boxplot for two genders")
install.packages("GGally")
library(GGally)
```{r echo=FALSE}
library(GGally)
ggpairs(learning2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrape("facethist", bins 20)))
ggpairs(learning2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrape("facethist", bins = 20)))
ggpairs(learning2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
ggpairs(learning2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20))) +
theme(base_size= 20)
ggpairs(learning2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20))) +
theme_light(base_size= 20)
ggpairs(learning2014, mapping = aes(col = gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20))) +
theme_light(base_size= 7)
model1 <- lm(points ~ age + age^2 + gender + attitude + deep + stra + surf)
model1 <- lm(points ~ age + I(age)^2 + gender + attitude + deep + stra + surf)
model1 <- lm(points ~ age + I(age)^2 + gender + attitude + deep + stra + surf, data= learning2014)
summary(model1)
model1 <- lm(points ~ age + age^2 + gender + attitude + deep + stra + surf, data= learning2014)
summary(model1)
model1 <- lm(points ~ age + (age)^2 + gender + attitude + deep + stra + surf, data= learning2014)
summary(model1)
deep
model1 <- lm(points ~ age + (age)^2 + gender + attitude + deep + stra, data= learning2014)
summary(model1)
model1 <- lm(points ~ age + (age)^2 + gender + attitude + stra, data= learning2014)
summary(model1)
model1 <- lm(points ~ age + gender + attitude + stra, data= learning2014)
summary(model1)
model1 <- lm(points ~ age + attitude + stra, data= learning2014)
summary(model1)
model1 <- lm(points ~ age + attitude + stra + deep, data= learning2014)
summary(model1)
model1 <- lm(points ~ age + attitude + stra + deep + surf, data= learning2014)
summary(model1)
model1 <- lm(points ~ age + attitude + stra + surf, data= learning2014)
summary(model1)
model1 <- lm(points ~ age + attitude + stra, data= learning2014)
summary(model1)
model1 <- lm(points ~ deep + surf + gender, data = learning2014)
summary(model1)
model2 <- lm(points ~ surf + age + stra, data = learning2014 )
summary(model2)
summary(model1)
summary(model2)
model3 <- lm(points ~ surf + stra + attitude, data = learning2014 )
summary(model3)
model4 <- lm(points ~ attitude + deep + gender, data = learning2014 )
summary(model4)
model5 <- lm(points ~ attitude + age + stra, data = learning2014 )
summary(model5)
par(mfrow = c(2,2,))
par(mfrow = c(2,2))
plot(my_model, data = learning2014, which(c(1:2,5)))
my_model <- lm(points ~ age + attitude + stra, data= learning2014)
summary(my_model)
par(mfrow = c(2,2))
plot(my_model, data = learning2014, which(c(1:2,5)))
plot(my_model, data = learning2014, which(c(T,T,F,F,T)))
plot(my_model, which(c(T,T,F,F,T)))
plot(my_model, which(c(T,T,F,F,T,F)))
plot(my_model, which(c(T,T,T,T,T,T)))
plot(my_model, which(c(T,T,F,F,T,F)))
plot(my_model$residuals)
plot(density(my_model$residuals))
points(rnorm(166,0,1))
rnorm(166,0,1)
points(density(rnorm(166,0,1)))
points(density(rnorm(165,0,1)))
plot(density(my_model$residuals), main="Distibution of residuals")
points(density(rnorm(166,0,1)))
points(density(dnorm(166,0,1)))
plot(density(rnorm(166,0,1)))
plot(dnorm(166,0,1))
plot(density(my_model$residuals), main="Distibution of residuals")
curve(dnorm(x,0,1))
curve(dnorm(166,0,1))
curve(dnorm(x,0,1))
curve(rnorm(x,0,1))
plot(density(my_model$residuals), main="Distibution of residuals")
curve(dnorm(x,mean(my_model$residuals),std(my_model$residuals),col="darkblue"))
curve(dnorm(x,mean(my_model$residuals),std(my_model$residuals)))
plot(density(my_model$residuals), main="Distibution of residuals")
curve(dnorm(x,mean(my_model$residuals),sqrt(var(my_model$residuals)))
curve(dnorm(x,mean(my_model$residuals),sqrt(var(my_model$residuals)))
curve(dnorm(x,mean = mean(my_model$residuals),sd = sqrt(var(my_model$residuals)))
plot(density(my_model$residuals), main="Distibution of residuals")
curve(dnorm(x,mean = mean(my_model$residuals),sd = sqrt(var(my_model$residuals)))
curve(dnorm(x,mean = mean(my_model$residuals),sd = sqrt(var(my_model$residuals))))
plot(density(my_model$residuals), main="Distibution of residuals")
curve(dnorm(x,mean = mean(my_model$residuals),sd = sqrt(var(my_model$residuals))))
plot(density(my_model$residuals), main="Distibution of residuals")
curve(dnorm(x,mean = mean(my_model$residuals),sd = sqrt(var(my_model$residuals))),add=TRUE)
hist(my_model$residuals), main="Distibution of residuals")
hist(my_model$residuals, main="Distibution of residuals")
curve(dnorm(x,mean = mean(my_model$residuals),sd = sqrt(var(my_model$residuals))),add=TRUE)
hist(my_model$residuals, density=20, breaks=20,prob=TRUE, main="Distibution of residuals")
curve(dnorm(x,mean = mean(my_model$residuals),sd = sqrt(var(my_model$residuals))),add=TRUE)
plot(dnorm(166,0,1))
plot(dnorm(x,0,1))
hist(my_model$residuals, density=20, breaks=20,prob=TRUE, main="Distibution of residuals")
lines(density(rnorm(166,0,1)))
plot(density(my_model$residuals), main="Distibution of residuals")
lines(density(rnorm(166,0,1)))
res_hist <- hist(my_model$residuals)
multiplier <- res_hist$counts / res_hist$density
res_dens$y <- res_dens$y * multiplier[1]
res_dens <- density(my_model$residuals)
res_dens$y <- res_dens$y * multiplier[1]
plot(res_hist)
lines(res_dens)
plot(density(my_model$residuals), main="Distibution of residuals")
lines(density(rnorm(166)))
plot(density(my_model$residuals), main="Distibution of residuals")
plot.new()
lines(density(rnorm(166)))
my_model$residuals
plot(density(my_model$residuals))
lines(density(rnorm(166)))
lines(density(rnorm(1000)))
lines(density(rnorm(1000000000000)))
lines(density(rnorm(1000000)))
lines(density(rnorm(1000000,mean(my_model$residuals),sqrt(var(my_model$residuals)))))
lines(density(rnorm(1000000,mean(my_model$residuals),sqrt(var(my_model$residuals)))),col="navyblue")
lines(density(rnorm(166,mean(my_model$residuals),sqrt(var(my_model$residuals)))),col="navyblue")
plot(density(my_model$residuals), main="Distibution of residuals")
lines(density(rnorm(1000000,mean(my_model$residuals),sqrt(var(my_model$residuals)))),col="navyblue")
plot(density(my_model$residuals), main="Distibution of residuals")
lines(density(rnorm(1000000,mean(my_model$residuals),sqrt(var(my_model$residuals)))),col="navyblue")
plot(density(my_model$residuals), main="Distibution of residuals")
lines(density(rnorm(1000,mean(my_model$residuals),sqrt(var(my_model$residuals)))),col="navyblue")
plot(density(my_model$residuals), main="Distibution of residuals")
lines(density(rnorm(100000,mean(my_model$residuals),sqrt(var(my_model$residuals)))),col="navyblue")
plot(my_model$residuals, dnorm(my_model$residuals,mean(my_model$residuals),sqrt(var(my_model$residuals))))
plot(my_model$residuals, dnorm(my_model$residuals,mean(my_model$residuals),sqrt(var(my_model$residuals))), type="l",lwd=1)
res <- my_model$residuals
h <- hist(res,breaks=20)
resfit <- seq(min(res),max(res),length(res))
yfit <- dnorm(resfit, mean(res), sd(res))
lines(resfit,yfit,col="navyblue",lwd=2)
res <- my_model$residuals
hist(res,breaks=20)
resfit <- seq(min(res),max(res),length(res))
yfit <- dnorm(resfit, mean(res), sd(res))
lines(resfit,yfit,col="navyblue",lwd=2)
plot(my_model$residuals, dnorm(my_model$residuals,mean(my_model$residuals),sqrt(var(my_model$residuals))), type="l",lwd=1)
plot(density(my_model$residuals), main="Distibution of residuals")
lines(density(rnorm(1000000,mean(my_model$residuals),sqrt(var(my_model$residuals)))),col="navyblue")
plot(density(my_model$residuals), main="Distibution of residuals")
lines(density(rnorm(10000000,mean(my_model$residuals),sqrt(var(my_model$residuals)))),col="navyblue")
plot(my_model, which(c(T,T,F,F,T,F)))
library(ggplot2)
par(mfrow = c(2,2))
plot(my_model, which(c(T,T,F,F,T,F)))
